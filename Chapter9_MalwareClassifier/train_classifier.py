import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import joblib
import os

# === Paths ===
DATA_PATH = "dataset/malware_dataset.csv"
MODEL_PATH = "model/malware_classifier.pkl"

# === Step 1: Load the dataset ===
if not os.path.exists(DATA_PATH):
    print(f"Dataset not found at: {DATA_PATH}")
    exit()

print(f"Loading dataset from: {DATA_PATH}")
df = pd.read_csv(DATA_PATH)

# === Step 2: Preprocess features and labels ===
X = df.drop("label", axis=1)
y = df["label"]

# Convert "malicious"/"benign" â†’ 1/0
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# === Step 3: Split data ===
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

# === Step 4: Train Random Forest ===
print("Training Random Forest model...")
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# === Step 5: Evaluate the model ===
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("\nðŸ“Š Evaluation Report:")
print(classification_report(y_test, y_pred, target_names=le.classes_))
print(f"Accuracy: {accuracy:.2f}")

# === Step 6: Save the model ===
if not os.path.exists("model"):
    os.makedirs("model")

joblib.dump(clf, MODEL_PATH)
print(f"Model saved to: {MODEL_PATH}")




