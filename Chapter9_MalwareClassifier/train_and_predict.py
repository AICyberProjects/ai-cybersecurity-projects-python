# Combined Script: Train + Predict (All-in-One)
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import joblib
import os

# === Paths ===
DATA_PATH = "dataset/malware_dataset.csv"
MODEL_PATH = "model/malware_classifier.pkl"
SAMPLE_PATH = "test_samples/sample_features.csv"

# === Step 1: Train the Model ===
if not os.path.exists(DATA_PATH):
    print(f"[x] Dataset not found at: {DATA_PATH}")
    exit()

print(f"Loading dataset from: {DATA_PATH}")
df = pd.read_csv(DATA_PATH)

# Preprocess
X = df.drop("label", axis=1)
y = df["label"]

le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

print("Training Random Forest model...")
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Evaluate
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("Evaluation Report:")
print(classification_report(y_test, y_pred, target_names=le.classes_))
print(f"Accuracy: {accuracy:.2f}")

# Save model
if not os.path.exists("model"):
    os.makedirs("model")
joblib.dump(clf, MODEL_PATH)
print(f"Model saved to: {MODEL_PATH}")

# === Step 2: Load New Samples and Predict ===
if not os.path.exists(SAMPLE_PATH):
    print(f"[x] Sample file not found: {SAMPLE_PATH}")
    exit()

print(f"Loading sample features from: {SAMPLE_PATH}")
sample_df = pd.read_csv(SAMPLE_PATH)

print("Scanning samples...")
sample_preds = clf.predict(sample_df)

print("Prediction Results:")
for i, pred in enumerate(sample_preds):
    label = "MALICIOUS" if pred == 1 else "BENIGN"
    print(f"Sample {i+1}: {label}")


